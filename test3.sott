define sum :
  Set -> Set -> Set
as \A -> \B -> (x : Bool) * x by_cases for x. Set { True -> A; False -> B }

define inl :
  (A:Set)(B:Set) -> A -> sum A B
as \A -> \B -> \a -> (True, a)

(* Failure of canonicity -- see notebook *)

define and :
  Bool -> Bool -> Bool
as \x -> \y -> x by_cases for y. Bool { True -> y; False -> False }

(* An easier to use functional extensionality principle *)
define funext2 :
  (S : Set)(T : S -> Set)(f : (x : S) -> T x)(g : (x : S) -> T x) ->
  ((x : S) -> [f x : T x = g x : T x]) ->
  [f : (x : S) -> T x = g : (x : S) -> T x]
as \S -> \T -> \f -> \g -> \e ->
   funext (x1 x2 xe. coerce(e x1,
                            [f x1 : T x1 = g x1 : T x1],
                            [f x1 : T x1 = g x2 : T x2],
                            subst(S,y.[f x1 : T x1 = g y : T y],x1,x2,xe)))

define eq_funcs :
  [ \b -> and b False : Bool -> Bool = \b -> False : Bool -> Bool]
as
  funext2 Bool (\x -> Bool) (\b -> and b False) (\b -> False)
    (\b -> b by_cases for b. [and b False : Bool = False : Bool ]
                { True -> refl; False -> refl })
(*
FIXME: this doesn't work because the equality types do not live inside the universe...

define F : (Bool -> Bool) -> Set
as \f -> sum [f : Bool -> Bool = \x -> False : Bool -> Bool] [f : Bool -> Bool = \x -> True : Bool -> Bool]

*)